#!/bin/sh
# shellcheck disable=1090

set -u

# defaulting XDG_RUNTIME_DIR
printf '%s' "$(ps -p 1 -o comm=)" | grep -q 'systemd' && : "${XDG_RUNTIME_DIR:="/run/user/$(id -u)"}"
: "${XDG_RUNTIME_DIR:="/tmp"}"
: "${SESSION_HOME:="${XDG_RUNTIME_DIR}/session"}"
: "${SESSION_SELF_NAME:="session"}"

info() {
  printf >&2 '%s: %s\n' "${SESSION_SELF_NAME}" "${1}"
}

usage() {
  printf >&2 '%s: usage: %s <subcomand> <argumengs...>\n' "${SESSION_SELF_NAME}" "${SESSION_SELF_NAME}"
  printf >&2 'global flags:\n'
  printf >&2 '  -s NAME, --name NAME  specify session name\n'
  printf >&2 '  --                    treat subsequent arguments as positional\n'
  printf >&2 'subcommands:\n'
  printf >&2 '  import VAR[,...]     import environment variable VAR to the sesison\n'
  printf >&2 '  set VAR=VALUE[,...]  set environment variable VAR to be VALUE inside of the session\n'
  printf >&2 '  unset VAR[,...]      unset environment variable VAR in the sesison\n'
  printf >&2 '  run COMMAND          run a command inside the session\n'
}

acquire_lock() {
  while [ -f "${session_current_lockfile}" ]; do
    sleep 0.05
  done
  touch "${session_current_lockfile}"
}

release_lock() {
  rm "${session_current_lockfile}"
}

# parse (global) flags
session_name=
while :; do
    case "${1}" in
        -s|--name)
            shift
            [ -n "${1-}" ] || { info 'ERROR: session name is empty or not provided' && exit 1; }
            session_name="${1}"
            ;;
        --)              # End of all options.
            shift
            break
            ;;
        -?*)
            info 'ERROR: unknown option: %s\n' "${1}" >&2
            exit 1
            ;;
        *) break ;;
    esac
    shift
done

[ -n "${session_name:-}" ] || { info 'ERROR: session name not provided' && usage && exit 1; }

session_current_home="${SESSION_HOME}/${session_name}"
session_current_envfile="${session_current_home}/environ"
session_current_lockfile="${session_current_home}/lock"
mkdir -p "${session_current_home}" || { info "ERROR: cannot create folder for the session name '${session_name}': file exists" && exit 1; }

# parse subcommands
case "${1}" in
  set) 
    shift
    new_environment="$(
      for key_value in "${@}"; do
        printf '%s' "${key_value}" | grep '=' || info "ERROR: invalid key=value pair: '${key_value}'" | exit 1
        printf "%s\n" "${key_value}"
      done
    )"
    acquire_lock
    {
      old_environment="$(cat 2>'/dev/null' "${session_current_envfile}")"
      printf '%s\n%s' "${old_environment}" "${new_environment}" > "${session_current_envfile}"
    }
    release_lock
    ;;
  import)
    shift

    new_environment="$(
      for variable_name in "${@}"; do
        # DANGER: grep can treat input as regex, but we can't not have it because of ^.
        key_value="$(env | grep "^${variable_name}=")"
        [ -n "${key_value}" ] || continue
        printf "%s\n" "${key_value}"
      done
    )"

    acquire_lock
    {
      old_environment="$(cat 2>'/dev/null' "${session_current_envfile}")"
      printf '%s\n%s' "${old_environment}" "${new_environment}" > "${session_current_envfile}"
    }
    release_lock
    ;;
  unset)
    shift
    new_environment="$(
      while IFS= read -r key_value; do
        for variable_name in "${@}"; do
          printf '%s' "${key_value}" | grep -v "^${variable_name}="
        done
      done < "${session_current_envfile}"
    )";
    acquire_lock
    {
      printf '%s' "${new_environment}" > "${session_current_envfile}"
    }
    release_lock
    ;;
  run) 
    shift
    while IFS= read -r line; do
      [ -n "${line}" ] || continue
      # SC2163: This does not export 'line'. Remove $/${} for that, or use ${var?} to quiet.
      # (was "${line}")
      export "${line?}"
    done < "${session_current_envfile}"
    export SESSION_SESSION_NAME="${session_name}"
    sh -c "${*}" || exit 1
    ;;
  *) info "ERROR: no such subcommand '${1}'" && usage && exit 1 ;;
esac
